// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: embedded-windows.scheme.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_embedded_2dwindows_2escheme_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_embedded_2dwindows_2escheme_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_embedded_2dwindows_2escheme_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_embedded_2dwindows_2escheme_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_embedded_2dwindows_2escheme_2eproto;
namespace SMBlob {
namespace EmbeddedWindows {
namespace Scheme {
class CloseApplicationReq;
struct CloseApplicationReqDefaultTypeInternal;
extern CloseApplicationReqDefaultTypeInternal _CloseApplicationReq_default_instance_;
class CloseApplicationRes;
struct CloseApplicationResDefaultTypeInternal;
extern CloseApplicationResDefaultTypeInternal _CloseApplicationRes_default_instance_;
class CloseWindowReq;
struct CloseWindowReqDefaultTypeInternal;
extern CloseWindowReqDefaultTypeInternal _CloseWindowReq_default_instance_;
class CloseWindowRes;
struct CloseWindowResDefaultTypeInternal;
extern CloseWindowResDefaultTypeInternal _CloseWindowRes_default_instance_;
class ConnectApplicationRes;
struct ConnectApplicationResDefaultTypeInternal;
extern ConnectApplicationResDefaultTypeInternal _ConnectApplicationRes_default_instance_;
class EmbedWindowReq;
struct EmbedWindowReqDefaultTypeInternal;
extern EmbedWindowReqDefaultTypeInternal _EmbedWindowReq_default_instance_;
class EmbedWindowRes;
struct EmbedWindowResDefaultTypeInternal;
extern EmbedWindowResDefaultTypeInternal _EmbedWindowRes_default_instance_;
class InitApplicationRes;
struct InitApplicationResDefaultTypeInternal;
extern InitApplicationResDefaultTypeInternal _InitApplicationRes_default_instance_;
class ReleaseWindowReq;
struct ReleaseWindowReqDefaultTypeInternal;
extern ReleaseWindowReqDefaultTypeInternal _ReleaseWindowReq_default_instance_;
class ReleaseWindowRes;
struct ReleaseWindowResDefaultTypeInternal;
extern ReleaseWindowResDefaultTypeInternal _ReleaseWindowRes_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Window;
struct WindowDefaultTypeInternal;
extern WindowDefaultTypeInternal _Window_default_instance_;
}  // namespace Scheme
}  // namespace EmbeddedWindows
}  // namespace SMBlob
PROTOBUF_NAMESPACE_OPEN
template<> ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::Request* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Request>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::Response* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Response>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::Status* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Status>(Arena*);
template<> ::SMBlob::EmbeddedWindows::Scheme::Window* Arena::CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Window>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SMBlob {
namespace EmbeddedWindows {
namespace Scheme {

// ===================================================================

class Window final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.Window) */ {
 public:
  inline Window() : Window(nullptr) {}
  ~Window() override;
  explicit PROTOBUF_CONSTEXPR Window(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Window(const Window& from);
  Window(Window&& from) noexcept
    : Window() {
    *this = ::std::move(from);
  }

  inline Window& operator=(const Window& from) {
    CopyFrom(from);
    return *this;
  }
  inline Window& operator=(Window&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Window& default_instance() {
    return *internal_default_instance();
  }
  static inline const Window* internal_default_instance() {
    return reinterpret_cast<const Window*>(
               &_Window_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Window& a, Window& b) {
    a.Swap(&b);
  }
  inline void Swap(Window* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Window* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Window* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Window>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Window& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Window& from) {
    Window::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Window* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.Window";
  }
  protected:
  explicit Window(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowUuidFieldNumber = 3,
    kNativeWindowIdFieldNumber = 1,
    kWindowIdFieldNumber = 2,
    kProcessIdFieldNumber = 4,
  };
  // optional string windowUuid = 3;
  bool has_windowuuid() const;
  private:
  bool _internal_has_windowuuid() const;
  public:
  void clear_windowuuid();
  const std::string& windowuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_windowuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_windowuuid();
  PROTOBUF_NODISCARD std::string* release_windowuuid();
  void set_allocated_windowuuid(std::string* windowuuid);
  private:
  const std::string& _internal_windowuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_windowuuid(const std::string& value);
  std::string* _internal_mutable_windowuuid();
  public:

  // uint64 nativeWindowId = 1;
  void clear_nativewindowid();
  uint64_t nativewindowid() const;
  void set_nativewindowid(uint64_t value);
  private:
  uint64_t _internal_nativewindowid() const;
  void _internal_set_nativewindowid(uint64_t value);
  public:

  // uint64 windowId = 2;
  void clear_windowid();
  uint64_t windowid() const;
  void set_windowid(uint64_t value);
  private:
  uint64_t _internal_windowid() const;
  void _internal_set_windowid(uint64_t value);
  public:

  // optional uint64 processId = 4;
  bool has_processid() const;
  private:
  bool _internal_has_processid() const;
  public:
  void clear_processid();
  uint64_t processid() const;
  void set_processid(uint64_t value);
  private:
  uint64_t _internal_processid() const;
  void _internal_set_processid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.Window)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr windowuuid_;
    uint64_t nativewindowid_;
    uint64_t windowid_;
    uint64_t processid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 3,
    kTimeFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string code = 3;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // optional uint64 time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    uint64_t time_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class CloseApplicationReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.CloseApplicationReq) */ {
 public:
  inline CloseApplicationReq() : CloseApplicationReq(nullptr) {}
  ~CloseApplicationReq() override;
  explicit PROTOBUF_CONSTEXPR CloseApplicationReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseApplicationReq(const CloseApplicationReq& from);
  CloseApplicationReq(CloseApplicationReq&& from) noexcept
    : CloseApplicationReq() {
    *this = ::std::move(from);
  }

  inline CloseApplicationReq& operator=(const CloseApplicationReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseApplicationReq& operator=(CloseApplicationReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseApplicationReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseApplicationReq* internal_default_instance() {
    return reinterpret_cast<const CloseApplicationReq*>(
               &_CloseApplicationReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CloseApplicationReq& a, CloseApplicationReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseApplicationReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseApplicationReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseApplicationReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseApplicationReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseApplicationReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CloseApplicationReq& from) {
    CloseApplicationReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseApplicationReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.CloseApplicationReq";
  }
  protected:
  explicit CloseApplicationReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1001,
  };
  // optional string tag = 1001;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.CloseApplicationReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class CloseApplicationRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes) */ {
 public:
  inline CloseApplicationRes() : CloseApplicationRes(nullptr) {}
  ~CloseApplicationRes() override;
  explicit PROTOBUF_CONSTEXPR CloseApplicationRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseApplicationRes(const CloseApplicationRes& from);
  CloseApplicationRes(CloseApplicationRes&& from) noexcept
    : CloseApplicationRes() {
    *this = ::std::move(from);
  }

  inline CloseApplicationRes& operator=(const CloseApplicationRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseApplicationRes& operator=(CloseApplicationRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseApplicationRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseApplicationRes* internal_default_instance() {
    return reinterpret_cast<const CloseApplicationRes*>(
               &_CloseApplicationRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CloseApplicationRes& a, CloseApplicationRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseApplicationRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseApplicationRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseApplicationRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseApplicationRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseApplicationRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CloseApplicationRes& from) {
    CloseApplicationRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseApplicationRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes";
  }
  protected:
  explicit CloseApplicationRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1001,
    kStatusFieldNumber = 1,
  };
  // optional string tag = 1001;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::SMBlob::EmbeddedWindows::Scheme::Status& status() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Status* release_status();
  ::SMBlob::EmbeddedWindows::Scheme::Status* mutable_status();
  void set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Status& _internal_status() const;
  ::SMBlob::EmbeddedWindows::Scheme::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::SMBlob::EmbeddedWindows::Scheme::Status* status);
  ::SMBlob::EmbeddedWindows::Scheme::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::SMBlob::EmbeddedWindows::Scheme::Status* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class ConnectApplicationRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes) */ {
 public:
  inline ConnectApplicationRes() : ConnectApplicationRes(nullptr) {}
  ~ConnectApplicationRes() override;
  explicit PROTOBUF_CONSTEXPR ConnectApplicationRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectApplicationRes(const ConnectApplicationRes& from);
  ConnectApplicationRes(ConnectApplicationRes&& from) noexcept
    : ConnectApplicationRes() {
    *this = ::std::move(from);
  }

  inline ConnectApplicationRes& operator=(const ConnectApplicationRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectApplicationRes& operator=(ConnectApplicationRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectApplicationRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectApplicationRes* internal_default_instance() {
    return reinterpret_cast<const ConnectApplicationRes*>(
               &_ConnectApplicationRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConnectApplicationRes& a, ConnectApplicationRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectApplicationRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectApplicationRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectApplicationRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectApplicationRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectApplicationRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectApplicationRes& from) {
    ConnectApplicationRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectApplicationRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes";
  }
  protected:
  explicit ConnectApplicationRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1001,
    kStatusFieldNumber = 1,
  };
  // optional string tag = 1001;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::SMBlob::EmbeddedWindows::Scheme::Status& status() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Status* release_status();
  ::SMBlob::EmbeddedWindows::Scheme::Status* mutable_status();
  void set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Status& _internal_status() const;
  ::SMBlob::EmbeddedWindows::Scheme::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::SMBlob::EmbeddedWindows::Scheme::Status* status);
  ::SMBlob::EmbeddedWindows::Scheme::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::SMBlob::EmbeddedWindows::Scheme::Status* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class InitApplicationRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes) */ {
 public:
  inline InitApplicationRes() : InitApplicationRes(nullptr) {}
  ~InitApplicationRes() override;
  explicit PROTOBUF_CONSTEXPR InitApplicationRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitApplicationRes(const InitApplicationRes& from);
  InitApplicationRes(InitApplicationRes&& from) noexcept
    : InitApplicationRes() {
    *this = ::std::move(from);
  }

  inline InitApplicationRes& operator=(const InitApplicationRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitApplicationRes& operator=(InitApplicationRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitApplicationRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitApplicationRes* internal_default_instance() {
    return reinterpret_cast<const InitApplicationRes*>(
               &_InitApplicationRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InitApplicationRes& a, InitApplicationRes& b) {
    a.Swap(&b);
  }
  inline void Swap(InitApplicationRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitApplicationRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitApplicationRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitApplicationRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitApplicationRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitApplicationRes& from) {
    InitApplicationRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitApplicationRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.InitApplicationRes";
  }
  protected:
  explicit InitApplicationRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1001,
    kStatusFieldNumber = 1,
  };
  // optional string tag = 1001;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::SMBlob::EmbeddedWindows::Scheme::Status& status() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Status* release_status();
  ::SMBlob::EmbeddedWindows::Scheme::Status* mutable_status();
  void set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Status& _internal_status() const;
  ::SMBlob::EmbeddedWindows::Scheme::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::SMBlob::EmbeddedWindows::Scheme::Status* status);
  ::SMBlob::EmbeddedWindows::Scheme::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::SMBlob::EmbeddedWindows::Scheme::Status* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class CloseWindowReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq) */ {
 public:
  inline CloseWindowReq() : CloseWindowReq(nullptr) {}
  ~CloseWindowReq() override;
  explicit PROTOBUF_CONSTEXPR CloseWindowReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseWindowReq(const CloseWindowReq& from);
  CloseWindowReq(CloseWindowReq&& from) noexcept
    : CloseWindowReq() {
    *this = ::std::move(from);
  }

  inline CloseWindowReq& operator=(const CloseWindowReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseWindowReq& operator=(CloseWindowReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseWindowReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseWindowReq* internal_default_instance() {
    return reinterpret_cast<const CloseWindowReq*>(
               &_CloseWindowReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CloseWindowReq& a, CloseWindowReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseWindowReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseWindowReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseWindowReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseWindowReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseWindowReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CloseWindowReq& from) {
    CloseWindowReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseWindowReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.CloseWindowReq";
  }
  protected:
  explicit CloseWindowReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1001,
    kWindowFieldNumber = 1,
  };
  // optional string tag = 1001;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .SMBlob.EmbeddedWindows.Scheme.Window window = 1;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::SMBlob::EmbeddedWindows::Scheme::Window& window() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Window* release_window();
  ::SMBlob::EmbeddedWindows::Scheme::Window* mutable_window();
  void set_allocated_window(::SMBlob::EmbeddedWindows::Scheme::Window* window);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Window& _internal_window() const;
  ::SMBlob::EmbeddedWindows::Scheme::Window* _internal_mutable_window();
  public:
  void unsafe_arena_set_allocated_window(
      ::SMBlob::EmbeddedWindows::Scheme::Window* window);
  ::SMBlob::EmbeddedWindows::Scheme::Window* unsafe_arena_release_window();

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::SMBlob::EmbeddedWindows::Scheme::Window* window_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class CloseWindowRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes) */ {
 public:
  inline CloseWindowRes() : CloseWindowRes(nullptr) {}
  ~CloseWindowRes() override;
  explicit PROTOBUF_CONSTEXPR CloseWindowRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseWindowRes(const CloseWindowRes& from);
  CloseWindowRes(CloseWindowRes&& from) noexcept
    : CloseWindowRes() {
    *this = ::std::move(from);
  }

  inline CloseWindowRes& operator=(const CloseWindowRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseWindowRes& operator=(CloseWindowRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseWindowRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseWindowRes* internal_default_instance() {
    return reinterpret_cast<const CloseWindowRes*>(
               &_CloseWindowRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CloseWindowRes& a, CloseWindowRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseWindowRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseWindowRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseWindowRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseWindowRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseWindowRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CloseWindowRes& from) {
    CloseWindowRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseWindowRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.CloseWindowRes";
  }
  protected:
  explicit CloseWindowRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1001,
    kStatusFieldNumber = 1,
  };
  // optional string tag = 1001;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::SMBlob::EmbeddedWindows::Scheme::Status& status() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Status* release_status();
  ::SMBlob::EmbeddedWindows::Scheme::Status* mutable_status();
  void set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Status& _internal_status() const;
  ::SMBlob::EmbeddedWindows::Scheme::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::SMBlob::EmbeddedWindows::Scheme::Status* status);
  ::SMBlob::EmbeddedWindows::Scheme::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::SMBlob::EmbeddedWindows::Scheme::Status* status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class EmbedWindowReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq) */ {
 public:
  inline EmbedWindowReq() : EmbedWindowReq(nullptr) {}
  ~EmbedWindowReq() override;
  explicit PROTOBUF_CONSTEXPR EmbedWindowReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmbedWindowReq(const EmbedWindowReq& from);
  EmbedWindowReq(EmbedWindowReq&& from) noexcept
    : EmbedWindowReq() {
    *this = ::std::move(from);
  }

  inline EmbedWindowReq& operator=(const EmbedWindowReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedWindowReq& operator=(EmbedWindowReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmbedWindowReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmbedWindowReq* internal_default_instance() {
    return reinterpret_cast<const EmbedWindowReq*>(
               &_EmbedWindowReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EmbedWindowReq& a, EmbedWindowReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedWindowReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbedWindowReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmbedWindowReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmbedWindowReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmbedWindowReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmbedWindowReq& from) {
    EmbedWindowReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedWindowReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq";
  }
  protected:
  explicit EmbedWindowReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1001,
    kWindowFieldNumber = 1,
  };
  // optional string tag = 1001;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .SMBlob.EmbeddedWindows.Scheme.Window window = 1;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::SMBlob::EmbeddedWindows::Scheme::Window& window() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Window* release_window();
  ::SMBlob::EmbeddedWindows::Scheme::Window* mutable_window();
  void set_allocated_window(::SMBlob::EmbeddedWindows::Scheme::Window* window);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Window& _internal_window() const;
  ::SMBlob::EmbeddedWindows::Scheme::Window* _internal_mutable_window();
  public:
  void unsafe_arena_set_allocated_window(
      ::SMBlob::EmbeddedWindows::Scheme::Window* window);
  ::SMBlob::EmbeddedWindows::Scheme::Window* unsafe_arena_release_window();

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::SMBlob::EmbeddedWindows::Scheme::Window* window_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class EmbedWindowRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes) */ {
 public:
  inline EmbedWindowRes() : EmbedWindowRes(nullptr) {}
  ~EmbedWindowRes() override;
  explicit PROTOBUF_CONSTEXPR EmbedWindowRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmbedWindowRes(const EmbedWindowRes& from);
  EmbedWindowRes(EmbedWindowRes&& from) noexcept
    : EmbedWindowRes() {
    *this = ::std::move(from);
  }

  inline EmbedWindowRes& operator=(const EmbedWindowRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedWindowRes& operator=(EmbedWindowRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmbedWindowRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmbedWindowRes* internal_default_instance() {
    return reinterpret_cast<const EmbedWindowRes*>(
               &_EmbedWindowRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EmbedWindowRes& a, EmbedWindowRes& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedWindowRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbedWindowRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmbedWindowRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmbedWindowRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmbedWindowRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmbedWindowRes& from) {
    EmbedWindowRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmbedWindowRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes";
  }
  protected:
  explicit EmbedWindowRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1001,
    kStatusFieldNumber = 1,
    kWindowFieldNumber = 2,
    kParentWindowFieldNumber = 3,
  };
  // optional string tag = 1001;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::SMBlob::EmbeddedWindows::Scheme::Status& status() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Status* release_status();
  ::SMBlob::EmbeddedWindows::Scheme::Status* mutable_status();
  void set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Status& _internal_status() const;
  ::SMBlob::EmbeddedWindows::Scheme::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::SMBlob::EmbeddedWindows::Scheme::Status* status);
  ::SMBlob::EmbeddedWindows::Scheme::Status* unsafe_arena_release_status();

  // .SMBlob.EmbeddedWindows.Scheme.Window window = 2;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::SMBlob::EmbeddedWindows::Scheme::Window& window() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Window* release_window();
  ::SMBlob::EmbeddedWindows::Scheme::Window* mutable_window();
  void set_allocated_window(::SMBlob::EmbeddedWindows::Scheme::Window* window);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Window& _internal_window() const;
  ::SMBlob::EmbeddedWindows::Scheme::Window* _internal_mutable_window();
  public:
  void unsafe_arena_set_allocated_window(
      ::SMBlob::EmbeddedWindows::Scheme::Window* window);
  ::SMBlob::EmbeddedWindows::Scheme::Window* unsafe_arena_release_window();

  // .SMBlob.EmbeddedWindows.Scheme.Window parentWindow = 3;
  bool has_parentwindow() const;
  private:
  bool _internal_has_parentwindow() const;
  public:
  void clear_parentwindow();
  const ::SMBlob::EmbeddedWindows::Scheme::Window& parentwindow() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Window* release_parentwindow();
  ::SMBlob::EmbeddedWindows::Scheme::Window* mutable_parentwindow();
  void set_allocated_parentwindow(::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Window& _internal_parentwindow() const;
  ::SMBlob::EmbeddedWindows::Scheme::Window* _internal_mutable_parentwindow();
  public:
  void unsafe_arena_set_allocated_parentwindow(
      ::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow);
  ::SMBlob::EmbeddedWindows::Scheme::Window* unsafe_arena_release_parentwindow();

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::SMBlob::EmbeddedWindows::Scheme::Status* status_;
    ::SMBlob::EmbeddedWindows::Scheme::Window* window_;
    ::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class ReleaseWindowReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq) */ {
 public:
  inline ReleaseWindowReq() : ReleaseWindowReq(nullptr) {}
  ~ReleaseWindowReq() override;
  explicit PROTOBUF_CONSTEXPR ReleaseWindowReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleaseWindowReq(const ReleaseWindowReq& from);
  ReleaseWindowReq(ReleaseWindowReq&& from) noexcept
    : ReleaseWindowReq() {
    *this = ::std::move(from);
  }

  inline ReleaseWindowReq& operator=(const ReleaseWindowReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseWindowReq& operator=(ReleaseWindowReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseWindowReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseWindowReq* internal_default_instance() {
    return reinterpret_cast<const ReleaseWindowReq*>(
               &_ReleaseWindowReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReleaseWindowReq& a, ReleaseWindowReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseWindowReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseWindowReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseWindowReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseWindowReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleaseWindowReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReleaseWindowReq& from) {
    ReleaseWindowReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseWindowReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq";
  }
  protected:
  explicit ReleaseWindowReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1001,
    kParentWindowFieldNumber = 1,
  };
  // optional string tag = 1001;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .SMBlob.EmbeddedWindows.Scheme.Window parentWindow = 1;
  bool has_parentwindow() const;
  private:
  bool _internal_has_parentwindow() const;
  public:
  void clear_parentwindow();
  const ::SMBlob::EmbeddedWindows::Scheme::Window& parentwindow() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Window* release_parentwindow();
  ::SMBlob::EmbeddedWindows::Scheme::Window* mutable_parentwindow();
  void set_allocated_parentwindow(::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Window& _internal_parentwindow() const;
  ::SMBlob::EmbeddedWindows::Scheme::Window* _internal_mutable_parentwindow();
  public:
  void unsafe_arena_set_allocated_parentwindow(
      ::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow);
  ::SMBlob::EmbeddedWindows::Scheme::Window* unsafe_arena_release_parentwindow();

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class ReleaseWindowRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes) */ {
 public:
  inline ReleaseWindowRes() : ReleaseWindowRes(nullptr) {}
  ~ReleaseWindowRes() override;
  explicit PROTOBUF_CONSTEXPR ReleaseWindowRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleaseWindowRes(const ReleaseWindowRes& from);
  ReleaseWindowRes(ReleaseWindowRes&& from) noexcept
    : ReleaseWindowRes() {
    *this = ::std::move(from);
  }

  inline ReleaseWindowRes& operator=(const ReleaseWindowRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseWindowRes& operator=(ReleaseWindowRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseWindowRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseWindowRes* internal_default_instance() {
    return reinterpret_cast<const ReleaseWindowRes*>(
               &_ReleaseWindowRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReleaseWindowRes& a, ReleaseWindowRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseWindowRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseWindowRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseWindowRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseWindowRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleaseWindowRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReleaseWindowRes& from) {
    ReleaseWindowRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseWindowRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes";
  }
  protected:
  explicit ReleaseWindowRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1001,
    kStatusFieldNumber = 1,
    kParentWindowFieldNumber = 2,
    kWindowFieldNumber = 3,
  };
  // optional string tag = 1001;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::SMBlob::EmbeddedWindows::Scheme::Status& status() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Status* release_status();
  ::SMBlob::EmbeddedWindows::Scheme::Status* mutable_status();
  void set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Status& _internal_status() const;
  ::SMBlob::EmbeddedWindows::Scheme::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::SMBlob::EmbeddedWindows::Scheme::Status* status);
  ::SMBlob::EmbeddedWindows::Scheme::Status* unsafe_arena_release_status();

  // .SMBlob.EmbeddedWindows.Scheme.Window parentWindow = 2;
  bool has_parentwindow() const;
  private:
  bool _internal_has_parentwindow() const;
  public:
  void clear_parentwindow();
  const ::SMBlob::EmbeddedWindows::Scheme::Window& parentwindow() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Window* release_parentwindow();
  ::SMBlob::EmbeddedWindows::Scheme::Window* mutable_parentwindow();
  void set_allocated_parentwindow(::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Window& _internal_parentwindow() const;
  ::SMBlob::EmbeddedWindows::Scheme::Window* _internal_mutable_parentwindow();
  public:
  void unsafe_arena_set_allocated_parentwindow(
      ::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow);
  ::SMBlob::EmbeddedWindows::Scheme::Window* unsafe_arena_release_parentwindow();

  // .SMBlob.EmbeddedWindows.Scheme.Window window = 3;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::SMBlob::EmbeddedWindows::Scheme::Window& window() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::Window* release_window();
  ::SMBlob::EmbeddedWindows::Scheme::Window* mutable_window();
  void set_allocated_window(::SMBlob::EmbeddedWindows::Scheme::Window* window);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::Window& _internal_window() const;
  ::SMBlob::EmbeddedWindows::Scheme::Window* _internal_mutable_window();
  public:
  void unsafe_arena_set_allocated_window(
      ::SMBlob::EmbeddedWindows::Scheme::Window* window);
  ::SMBlob::EmbeddedWindows::Scheme::Window* unsafe_arena_release_window();

  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::SMBlob::EmbeddedWindows::Scheme::Status* status_;
    ::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow_;
    ::SMBlob::EmbeddedWindows::Scheme::Window* window_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kCloseApplication = 1,
    kEmbedWindow = 2,
    kReleaseWindow = 3,
    kCloseWindow = 4,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloseApplicationFieldNumber = 1,
    kEmbedWindowFieldNumber = 2,
    kReleaseWindowFieldNumber = 3,
    kCloseWindowFieldNumber = 4,
  };
  // .SMBlob.EmbeddedWindows.Scheme.CloseApplicationReq closeApplication = 1;
  bool has_closeapplication() const;
  private:
  bool _internal_has_closeapplication() const;
  public:
  void clear_closeapplication();
  const ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq& closeapplication() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* release_closeapplication();
  ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* mutable_closeapplication();
  void set_allocated_closeapplication(::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* closeapplication);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq& _internal_closeapplication() const;
  ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* _internal_mutable_closeapplication();
  public:
  void unsafe_arena_set_allocated_closeapplication(
      ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* closeapplication);
  ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* unsafe_arena_release_closeapplication();

  // .SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq embedWindow = 2;
  bool has_embedwindow() const;
  private:
  bool _internal_has_embedwindow() const;
  public:
  void clear_embedwindow();
  const ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq& embedwindow() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* release_embedwindow();
  ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* mutable_embedwindow();
  void set_allocated_embedwindow(::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* embedwindow);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq& _internal_embedwindow() const;
  ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* _internal_mutable_embedwindow();
  public:
  void unsafe_arena_set_allocated_embedwindow(
      ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* embedwindow);
  ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* unsafe_arena_release_embedwindow();

  // .SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq releaseWindow = 3;
  bool has_releasewindow() const;
  private:
  bool _internal_has_releasewindow() const;
  public:
  void clear_releasewindow();
  const ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq& releasewindow() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* release_releasewindow();
  ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* mutable_releasewindow();
  void set_allocated_releasewindow(::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* releasewindow);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq& _internal_releasewindow() const;
  ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* _internal_mutable_releasewindow();
  public:
  void unsafe_arena_set_allocated_releasewindow(
      ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* releasewindow);
  ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* unsafe_arena_release_releasewindow();

  // .SMBlob.EmbeddedWindows.Scheme.CloseWindowReq closeWindow = 4;
  bool has_closewindow() const;
  private:
  bool _internal_has_closewindow() const;
  public:
  void clear_closewindow();
  const ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq& closewindow() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* release_closewindow();
  ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* mutable_closewindow();
  void set_allocated_closewindow(::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* closewindow);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq& _internal_closewindow() const;
  ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* _internal_mutable_closewindow();
  public:
  void unsafe_arena_set_allocated_closewindow(
      ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* closewindow);
  ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* unsafe_arena_release_closewindow();

  void clear_Message();
  MessageCase Message_case() const;
  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.Request)
 private:
  class _Internal;
  void set_has_closeapplication();
  void set_has_embedwindow();
  void set_has_releasewindow();
  void set_has_closewindow();

  inline bool has_Message() const;
  inline void clear_has_Message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* closeapplication_;
      ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* embedwindow_;
      ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* releasewindow_;
      ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* closewindow_;
    } Message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SMBlob.EmbeddedWindows.Scheme.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kCloseApplication = 1,
    kEmbedWindow = 2,
    kReleaseWindow = 3,
    kCloseWindow = 4,
    kConnectApplication = 5,
    kInitApplication = 6,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SMBlob.EmbeddedWindows.Scheme.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloseApplicationFieldNumber = 1,
    kEmbedWindowFieldNumber = 2,
    kReleaseWindowFieldNumber = 3,
    kCloseWindowFieldNumber = 4,
    kConnectApplicationFieldNumber = 5,
    kInitApplicationFieldNumber = 6,
  };
  // .SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes closeApplication = 1;
  bool has_closeapplication() const;
  private:
  bool _internal_has_closeapplication() const;
  public:
  void clear_closeapplication();
  const ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes& closeapplication() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* release_closeapplication();
  ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* mutable_closeapplication();
  void set_allocated_closeapplication(::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* closeapplication);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes& _internal_closeapplication() const;
  ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* _internal_mutable_closeapplication();
  public:
  void unsafe_arena_set_allocated_closeapplication(
      ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* closeapplication);
  ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* unsafe_arena_release_closeapplication();

  // .SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes embedWindow = 2;
  bool has_embedwindow() const;
  private:
  bool _internal_has_embedwindow() const;
  public:
  void clear_embedwindow();
  const ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes& embedwindow() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* release_embedwindow();
  ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* mutable_embedwindow();
  void set_allocated_embedwindow(::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* embedwindow);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes& _internal_embedwindow() const;
  ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* _internal_mutable_embedwindow();
  public:
  void unsafe_arena_set_allocated_embedwindow(
      ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* embedwindow);
  ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* unsafe_arena_release_embedwindow();

  // .SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes releaseWindow = 3;
  bool has_releasewindow() const;
  private:
  bool _internal_has_releasewindow() const;
  public:
  void clear_releasewindow();
  const ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes& releasewindow() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* release_releasewindow();
  ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* mutable_releasewindow();
  void set_allocated_releasewindow(::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* releasewindow);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes& _internal_releasewindow() const;
  ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* _internal_mutable_releasewindow();
  public:
  void unsafe_arena_set_allocated_releasewindow(
      ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* releasewindow);
  ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* unsafe_arena_release_releasewindow();

  // .SMBlob.EmbeddedWindows.Scheme.CloseWindowRes closeWindow = 4;
  bool has_closewindow() const;
  private:
  bool _internal_has_closewindow() const;
  public:
  void clear_closewindow();
  const ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes& closewindow() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* release_closewindow();
  ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* mutable_closewindow();
  void set_allocated_closewindow(::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* closewindow);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes& _internal_closewindow() const;
  ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* _internal_mutable_closewindow();
  public:
  void unsafe_arena_set_allocated_closewindow(
      ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* closewindow);
  ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* unsafe_arena_release_closewindow();

  // .SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes connectApplication = 5;
  bool has_connectapplication() const;
  private:
  bool _internal_has_connectapplication() const;
  public:
  void clear_connectapplication();
  const ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes& connectapplication() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* release_connectapplication();
  ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* mutable_connectapplication();
  void set_allocated_connectapplication(::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* connectapplication);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes& _internal_connectapplication() const;
  ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* _internal_mutable_connectapplication();
  public:
  void unsafe_arena_set_allocated_connectapplication(
      ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* connectapplication);
  ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* unsafe_arena_release_connectapplication();

  // .SMBlob.EmbeddedWindows.Scheme.InitApplicationRes initApplication = 6;
  bool has_initapplication() const;
  private:
  bool _internal_has_initapplication() const;
  public:
  void clear_initapplication();
  const ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes& initapplication() const;
  PROTOBUF_NODISCARD ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* release_initapplication();
  ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* mutable_initapplication();
  void set_allocated_initapplication(::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* initapplication);
  private:
  const ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes& _internal_initapplication() const;
  ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* _internal_mutable_initapplication();
  public:
  void unsafe_arena_set_allocated_initapplication(
      ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* initapplication);
  ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* unsafe_arena_release_initapplication();

  void clear_Message();
  MessageCase Message_case() const;
  // @@protoc_insertion_point(class_scope:SMBlob.EmbeddedWindows.Scheme.Response)
 private:
  class _Internal;
  void set_has_closeapplication();
  void set_has_embedwindow();
  void set_has_releasewindow();
  void set_has_closewindow();
  void set_has_connectapplication();
  void set_has_initapplication();

  inline bool has_Message() const;
  inline void clear_has_Message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* closeapplication_;
      ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* embedwindow_;
      ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* releasewindow_;
      ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* closewindow_;
      ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* connectapplication_;
      ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* initapplication_;
    } Message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedded_2dwindows_2escheme_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Window

// uint64 nativeWindowId = 1;
inline void Window::clear_nativewindowid() {
  _impl_.nativewindowid_ = uint64_t{0u};
}
inline uint64_t Window::_internal_nativewindowid() const {
  return _impl_.nativewindowid_;
}
inline uint64_t Window::nativewindowid() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Window.nativeWindowId)
  return _internal_nativewindowid();
}
inline void Window::_internal_set_nativewindowid(uint64_t value) {
  
  _impl_.nativewindowid_ = value;
}
inline void Window::set_nativewindowid(uint64_t value) {
  _internal_set_nativewindowid(value);
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.Window.nativeWindowId)
}

// uint64 windowId = 2;
inline void Window::clear_windowid() {
  _impl_.windowid_ = uint64_t{0u};
}
inline uint64_t Window::_internal_windowid() const {
  return _impl_.windowid_;
}
inline uint64_t Window::windowid() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Window.windowId)
  return _internal_windowid();
}
inline void Window::_internal_set_windowid(uint64_t value) {
  
  _impl_.windowid_ = value;
}
inline void Window::set_windowid(uint64_t value) {
  _internal_set_windowid(value);
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.Window.windowId)
}

// optional string windowUuid = 3;
inline bool Window::_internal_has_windowuuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Window::has_windowuuid() const {
  return _internal_has_windowuuid();
}
inline void Window::clear_windowuuid() {
  _impl_.windowuuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Window::windowuuid() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Window.windowUuid)
  return _internal_windowuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Window::set_windowuuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.windowuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.Window.windowUuid)
}
inline std::string* Window::mutable_windowuuid() {
  std::string* _s = _internal_mutable_windowuuid();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Window.windowUuid)
  return _s;
}
inline const std::string& Window::_internal_windowuuid() const {
  return _impl_.windowuuid_.Get();
}
inline void Window::_internal_set_windowuuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.windowuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* Window::_internal_mutable_windowuuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.windowuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* Window::release_windowuuid() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Window.windowUuid)
  if (!_internal_has_windowuuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.windowuuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.windowuuid_.IsDefault()) {
    _impl_.windowuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Window::set_allocated_windowuuid(std::string* windowuuid) {
  if (windowuuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.windowuuid_.SetAllocated(windowuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.windowuuid_.IsDefault()) {
    _impl_.windowuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.Window.windowUuid)
}

// optional uint64 processId = 4;
inline bool Window::_internal_has_processid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Window::has_processid() const {
  return _internal_has_processid();
}
inline void Window::clear_processid() {
  _impl_.processid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t Window::_internal_processid() const {
  return _impl_.processid_;
}
inline uint64_t Window::processid() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Window.processId)
  return _internal_processid();
}
inline void Window::_internal_set_processid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.processid_ = value;
}
inline void Window::set_processid(uint64_t value) {
  _internal_set_processid(value);
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.Window.processId)
}

// -------------------------------------------------------------------

// Status

// int32 status = 1;
inline void Status::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t Status::_internal_status() const {
  return _impl_.status_;
}
inline int32_t Status::status() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Status.status)
  return _internal_status();
}
inline void Status::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void Status::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.Status.status)
}

// optional string message = 2;
inline bool Status::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Status::has_message() const {
  return _internal_has_message();
}
inline void Status::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Status.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.Status.message)
}
inline std::string* Status::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Status.message)
  return _s;
}
inline const std::string& Status::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Status::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Status.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Status::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.Status.message)
}

// optional string code = 3;
inline bool Status::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Status::has_code() const {
  return _internal_has_code();
}
inline void Status::clear_code() {
  _impl_.code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Status::code() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Status.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.Status.code)
}
inline std::string* Status::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Status.code)
  return _s;
}
inline const std::string& Status::_internal_code() const {
  return _impl_.code_.Get();
}
inline void Status::_internal_set_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_code() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* Status::release_code() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Status.code)
  if (!_internal_has_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Status::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.Status.code)
}

// optional uint64 time = 4;
inline bool Status::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Status::has_time() const {
  return _internal_has_time();
}
inline void Status::clear_time() {
  _impl_.time_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t Status::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t Status::time() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Status.time)
  return _internal_time();
}
inline void Status::_internal_set_time(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.time_ = value;
}
inline void Status::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.Status.time)
}

// -------------------------------------------------------------------

// CloseApplicationReq

// optional string tag = 1001;
inline bool CloseApplicationReq::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloseApplicationReq::has_tag() const {
  return _internal_has_tag();
}
inline void CloseApplicationReq::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseApplicationReq::tag() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.CloseApplicationReq.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseApplicationReq::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.CloseApplicationReq.tag)
}
inline std::string* CloseApplicationReq::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.CloseApplicationReq.tag)
  return _s;
}
inline const std::string& CloseApplicationReq::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void CloseApplicationReq::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CloseApplicationReq::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CloseApplicationReq::release_tag() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.CloseApplicationReq.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloseApplicationReq::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.CloseApplicationReq.tag)
}

// -------------------------------------------------------------------

// CloseApplicationRes

// .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
inline bool CloseApplicationRes::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool CloseApplicationRes::has_status() const {
  return _internal_has_status();
}
inline void CloseApplicationRes::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& CloseApplicationRes::_internal_status() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Status&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Status_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& CloseApplicationRes::status() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes.status)
  return _internal_status();
}
inline void CloseApplicationRes::unsafe_arena_set_allocated_status(
    ::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes.status)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* CloseApplicationRes::release_status() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* CloseApplicationRes::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes.status)
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* CloseApplicationRes::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* CloseApplicationRes::mutable_status() {
  ::SMBlob::EmbeddedWindows::Scheme::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes.status)
  return _msg;
}
inline void CloseApplicationRes::set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes.status)
}

// optional string tag = 1001;
inline bool CloseApplicationRes::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloseApplicationRes::has_tag() const {
  return _internal_has_tag();
}
inline void CloseApplicationRes::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseApplicationRes::tag() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseApplicationRes::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes.tag)
}
inline std::string* CloseApplicationRes::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes.tag)
  return _s;
}
inline const std::string& CloseApplicationRes::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void CloseApplicationRes::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CloseApplicationRes::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CloseApplicationRes::release_tag() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloseApplicationRes::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes.tag)
}

// -------------------------------------------------------------------

// ConnectApplicationRes

// .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
inline bool ConnectApplicationRes::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ConnectApplicationRes::has_status() const {
  return _internal_has_status();
}
inline void ConnectApplicationRes::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& ConnectApplicationRes::_internal_status() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Status&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Status_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& ConnectApplicationRes::status() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes.status)
  return _internal_status();
}
inline void ConnectApplicationRes::unsafe_arena_set_allocated_status(
    ::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes.status)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* ConnectApplicationRes::release_status() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* ConnectApplicationRes::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes.status)
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* ConnectApplicationRes::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* ConnectApplicationRes::mutable_status() {
  ::SMBlob::EmbeddedWindows::Scheme::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes.status)
  return _msg;
}
inline void ConnectApplicationRes::set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes.status)
}

// optional string tag = 1001;
inline bool ConnectApplicationRes::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConnectApplicationRes::has_tag() const {
  return _internal_has_tag();
}
inline void ConnectApplicationRes::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConnectApplicationRes::tag() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectApplicationRes::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes.tag)
}
inline std::string* ConnectApplicationRes::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes.tag)
  return _s;
}
inline const std::string& ConnectApplicationRes::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void ConnectApplicationRes::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectApplicationRes::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectApplicationRes::release_tag() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConnectApplicationRes::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes.tag)
}

// -------------------------------------------------------------------

// InitApplicationRes

// .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
inline bool InitApplicationRes::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool InitApplicationRes::has_status() const {
  return _internal_has_status();
}
inline void InitApplicationRes::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& InitApplicationRes::_internal_status() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Status&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Status_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& InitApplicationRes::status() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes.status)
  return _internal_status();
}
inline void InitApplicationRes::unsafe_arena_set_allocated_status(
    ::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes.status)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* InitApplicationRes::release_status() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* InitApplicationRes::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes.status)
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* InitApplicationRes::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* InitApplicationRes::mutable_status() {
  ::SMBlob::EmbeddedWindows::Scheme::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes.status)
  return _msg;
}
inline void InitApplicationRes::set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes.status)
}

// optional string tag = 1001;
inline bool InitApplicationRes::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InitApplicationRes::has_tag() const {
  return _internal_has_tag();
}
inline void InitApplicationRes::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InitApplicationRes::tag() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitApplicationRes::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes.tag)
}
inline std::string* InitApplicationRes::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes.tag)
  return _s;
}
inline const std::string& InitApplicationRes::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void InitApplicationRes::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* InitApplicationRes::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* InitApplicationRes::release_tag() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void InitApplicationRes::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.InitApplicationRes.tag)
}

// -------------------------------------------------------------------

// CloseWindowReq

// .SMBlob.EmbeddedWindows.Scheme.Window window = 1;
inline bool CloseWindowReq::_internal_has_window() const {
  return this != internal_default_instance() && _impl_.window_ != nullptr;
}
inline bool CloseWindowReq::has_window() const {
  return _internal_has_window();
}
inline void CloseWindowReq::clear_window() {
  if (GetArenaForAllocation() == nullptr && _impl_.window_ != nullptr) {
    delete _impl_.window_;
  }
  _impl_.window_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& CloseWindowReq::_internal_window() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Window* p = _impl_.window_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Window&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Window_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& CloseWindowReq::window() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq.window)
  return _internal_window();
}
inline void CloseWindowReq::unsafe_arena_set_allocated_window(
    ::SMBlob::EmbeddedWindows::Scheme::Window* window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_);
  }
  _impl_.window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq.window)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* CloseWindowReq::release_window() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* CloseWindowReq::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq.window)
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* CloseWindowReq::_internal_mutable_window() {
  
  if (_impl_.window_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Window>(GetArenaForAllocation());
    _impl_.window_ = p;
  }
  return _impl_.window_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* CloseWindowReq::mutable_window() {
  ::SMBlob::EmbeddedWindows::Scheme::Window* _msg = _internal_mutable_window();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq.window)
  return _msg;
}
inline void CloseWindowReq::set_allocated_window(::SMBlob::EmbeddedWindows::Scheme::Window* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.window_;
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(window);
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.window_ = window;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq.window)
}

// optional string tag = 1001;
inline bool CloseWindowReq::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloseWindowReq::has_tag() const {
  return _internal_has_tag();
}
inline void CloseWindowReq::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseWindowReq::tag() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseWindowReq::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq.tag)
}
inline std::string* CloseWindowReq::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq.tag)
  return _s;
}
inline const std::string& CloseWindowReq::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void CloseWindowReq::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CloseWindowReq::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CloseWindowReq::release_tag() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloseWindowReq::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.CloseWindowReq.tag)
}

// -------------------------------------------------------------------

// CloseWindowRes

// .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
inline bool CloseWindowRes::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool CloseWindowRes::has_status() const {
  return _internal_has_status();
}
inline void CloseWindowRes::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& CloseWindowRes::_internal_status() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Status&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Status_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& CloseWindowRes::status() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes.status)
  return _internal_status();
}
inline void CloseWindowRes::unsafe_arena_set_allocated_status(
    ::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes.status)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* CloseWindowRes::release_status() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* CloseWindowRes::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes.status)
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* CloseWindowRes::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* CloseWindowRes::mutable_status() {
  ::SMBlob::EmbeddedWindows::Scheme::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes.status)
  return _msg;
}
inline void CloseWindowRes::set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes.status)
}

// optional string tag = 1001;
inline bool CloseWindowRes::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CloseWindowRes::has_tag() const {
  return _internal_has_tag();
}
inline void CloseWindowRes::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CloseWindowRes::tag() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseWindowRes::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes.tag)
}
inline std::string* CloseWindowRes::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes.tag)
  return _s;
}
inline const std::string& CloseWindowRes::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void CloseWindowRes::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CloseWindowRes::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CloseWindowRes::release_tag() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CloseWindowRes::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.CloseWindowRes.tag)
}

// -------------------------------------------------------------------

// EmbedWindowReq

// .SMBlob.EmbeddedWindows.Scheme.Window window = 1;
inline bool EmbedWindowReq::_internal_has_window() const {
  return this != internal_default_instance() && _impl_.window_ != nullptr;
}
inline bool EmbedWindowReq::has_window() const {
  return _internal_has_window();
}
inline void EmbedWindowReq::clear_window() {
  if (GetArenaForAllocation() == nullptr && _impl_.window_ != nullptr) {
    delete _impl_.window_;
  }
  _impl_.window_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& EmbedWindowReq::_internal_window() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Window* p = _impl_.window_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Window&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Window_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& EmbedWindowReq::window() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq.window)
  return _internal_window();
}
inline void EmbedWindowReq::unsafe_arena_set_allocated_window(
    ::SMBlob::EmbeddedWindows::Scheme::Window* window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_);
  }
  _impl_.window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq.window)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowReq::release_window() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowReq::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq.window)
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowReq::_internal_mutable_window() {
  
  if (_impl_.window_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Window>(GetArenaForAllocation());
    _impl_.window_ = p;
  }
  return _impl_.window_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowReq::mutable_window() {
  ::SMBlob::EmbeddedWindows::Scheme::Window* _msg = _internal_mutable_window();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq.window)
  return _msg;
}
inline void EmbedWindowReq::set_allocated_window(::SMBlob::EmbeddedWindows::Scheme::Window* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.window_;
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(window);
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.window_ = window;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq.window)
}

// optional string tag = 1001;
inline bool EmbedWindowReq::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EmbedWindowReq::has_tag() const {
  return _internal_has_tag();
}
inline void EmbedWindowReq::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EmbedWindowReq::tag() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmbedWindowReq::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq.tag)
}
inline std::string* EmbedWindowReq::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq.tag)
  return _s;
}
inline const std::string& EmbedWindowReq::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void EmbedWindowReq::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* EmbedWindowReq::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* EmbedWindowReq::release_tag() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EmbedWindowReq::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq.tag)
}

// -------------------------------------------------------------------

// EmbedWindowRes

// .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
inline bool EmbedWindowRes::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool EmbedWindowRes::has_status() const {
  return _internal_has_status();
}
inline void EmbedWindowRes::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& EmbedWindowRes::_internal_status() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Status&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Status_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& EmbedWindowRes::status() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.status)
  return _internal_status();
}
inline void EmbedWindowRes::unsafe_arena_set_allocated_status(
    ::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.status)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* EmbedWindowRes::release_status() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* EmbedWindowRes::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.status)
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* EmbedWindowRes::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* EmbedWindowRes::mutable_status() {
  ::SMBlob::EmbeddedWindows::Scheme::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.status)
  return _msg;
}
inline void EmbedWindowRes::set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.status)
}

// .SMBlob.EmbeddedWindows.Scheme.Window window = 2;
inline bool EmbedWindowRes::_internal_has_window() const {
  return this != internal_default_instance() && _impl_.window_ != nullptr;
}
inline bool EmbedWindowRes::has_window() const {
  return _internal_has_window();
}
inline void EmbedWindowRes::clear_window() {
  if (GetArenaForAllocation() == nullptr && _impl_.window_ != nullptr) {
    delete _impl_.window_;
  }
  _impl_.window_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& EmbedWindowRes::_internal_window() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Window* p = _impl_.window_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Window&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Window_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& EmbedWindowRes::window() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.window)
  return _internal_window();
}
inline void EmbedWindowRes::unsafe_arena_set_allocated_window(
    ::SMBlob::EmbeddedWindows::Scheme::Window* window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_);
  }
  _impl_.window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.window)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowRes::release_window() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowRes::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.window)
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowRes::_internal_mutable_window() {
  
  if (_impl_.window_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Window>(GetArenaForAllocation());
    _impl_.window_ = p;
  }
  return _impl_.window_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowRes::mutable_window() {
  ::SMBlob::EmbeddedWindows::Scheme::Window* _msg = _internal_mutable_window();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.window)
  return _msg;
}
inline void EmbedWindowRes::set_allocated_window(::SMBlob::EmbeddedWindows::Scheme::Window* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.window_;
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(window);
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.window_ = window;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.window)
}

// .SMBlob.EmbeddedWindows.Scheme.Window parentWindow = 3;
inline bool EmbedWindowRes::_internal_has_parentwindow() const {
  return this != internal_default_instance() && _impl_.parentwindow_ != nullptr;
}
inline bool EmbedWindowRes::has_parentwindow() const {
  return _internal_has_parentwindow();
}
inline void EmbedWindowRes::clear_parentwindow() {
  if (GetArenaForAllocation() == nullptr && _impl_.parentwindow_ != nullptr) {
    delete _impl_.parentwindow_;
  }
  _impl_.parentwindow_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& EmbedWindowRes::_internal_parentwindow() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Window* p = _impl_.parentwindow_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Window&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Window_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& EmbedWindowRes::parentwindow() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.parentWindow)
  return _internal_parentwindow();
}
inline void EmbedWindowRes::unsafe_arena_set_allocated_parentwindow(
    ::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parentwindow_);
  }
  _impl_.parentwindow_ = parentwindow;
  if (parentwindow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.parentWindow)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowRes::release_parentwindow() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.parentwindow_;
  _impl_.parentwindow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowRes::unsafe_arena_release_parentwindow() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.parentWindow)
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.parentwindow_;
  _impl_.parentwindow_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowRes::_internal_mutable_parentwindow() {
  
  if (_impl_.parentwindow_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Window>(GetArenaForAllocation());
    _impl_.parentwindow_ = p;
  }
  return _impl_.parentwindow_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* EmbedWindowRes::mutable_parentwindow() {
  ::SMBlob::EmbeddedWindows::Scheme::Window* _msg = _internal_mutable_parentwindow();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.parentWindow)
  return _msg;
}
inline void EmbedWindowRes::set_allocated_parentwindow(::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.parentwindow_;
  }
  if (parentwindow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parentwindow);
    if (message_arena != submessage_arena) {
      parentwindow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parentwindow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parentwindow_ = parentwindow;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.parentWindow)
}

// optional string tag = 1001;
inline bool EmbedWindowRes::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EmbedWindowRes::has_tag() const {
  return _internal_has_tag();
}
inline void EmbedWindowRes::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EmbedWindowRes::tag() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmbedWindowRes::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.tag)
}
inline std::string* EmbedWindowRes::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.tag)
  return _s;
}
inline const std::string& EmbedWindowRes::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void EmbedWindowRes::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* EmbedWindowRes::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* EmbedWindowRes::release_tag() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EmbedWindowRes::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes.tag)
}

// -------------------------------------------------------------------

// ReleaseWindowReq

// .SMBlob.EmbeddedWindows.Scheme.Window parentWindow = 1;
inline bool ReleaseWindowReq::_internal_has_parentwindow() const {
  return this != internal_default_instance() && _impl_.parentwindow_ != nullptr;
}
inline bool ReleaseWindowReq::has_parentwindow() const {
  return _internal_has_parentwindow();
}
inline void ReleaseWindowReq::clear_parentwindow() {
  if (GetArenaForAllocation() == nullptr && _impl_.parentwindow_ != nullptr) {
    delete _impl_.parentwindow_;
  }
  _impl_.parentwindow_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& ReleaseWindowReq::_internal_parentwindow() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Window* p = _impl_.parentwindow_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Window&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Window_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& ReleaseWindowReq::parentwindow() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq.parentWindow)
  return _internal_parentwindow();
}
inline void ReleaseWindowReq::unsafe_arena_set_allocated_parentwindow(
    ::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parentwindow_);
  }
  _impl_.parentwindow_ = parentwindow;
  if (parentwindow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq.parentWindow)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowReq::release_parentwindow() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.parentwindow_;
  _impl_.parentwindow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowReq::unsafe_arena_release_parentwindow() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq.parentWindow)
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.parentwindow_;
  _impl_.parentwindow_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowReq::_internal_mutable_parentwindow() {
  
  if (_impl_.parentwindow_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Window>(GetArenaForAllocation());
    _impl_.parentwindow_ = p;
  }
  return _impl_.parentwindow_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowReq::mutable_parentwindow() {
  ::SMBlob::EmbeddedWindows::Scheme::Window* _msg = _internal_mutable_parentwindow();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq.parentWindow)
  return _msg;
}
inline void ReleaseWindowReq::set_allocated_parentwindow(::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.parentwindow_;
  }
  if (parentwindow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parentwindow);
    if (message_arena != submessage_arena) {
      parentwindow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parentwindow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parentwindow_ = parentwindow;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq.parentWindow)
}

// optional string tag = 1001;
inline bool ReleaseWindowReq::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReleaseWindowReq::has_tag() const {
  return _internal_has_tag();
}
inline void ReleaseWindowReq::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReleaseWindowReq::tag() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReleaseWindowReq::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq.tag)
}
inline std::string* ReleaseWindowReq::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq.tag)
  return _s;
}
inline const std::string& ReleaseWindowReq::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void ReleaseWindowReq::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* ReleaseWindowReq::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* ReleaseWindowReq::release_tag() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReleaseWindowReq::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq.tag)
}

// -------------------------------------------------------------------

// ReleaseWindowRes

// .SMBlob.EmbeddedWindows.Scheme.Status status = 1;
inline bool ReleaseWindowRes::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ReleaseWindowRes::has_status() const {
  return _internal_has_status();
}
inline void ReleaseWindowRes::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& ReleaseWindowRes::_internal_status() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Status* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Status&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Status_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Status& ReleaseWindowRes::status() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.status)
  return _internal_status();
}
inline void ReleaseWindowRes::unsafe_arena_set_allocated_status(
    ::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.status)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* ReleaseWindowRes::release_status() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* ReleaseWindowRes::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.status)
  
  ::SMBlob::EmbeddedWindows::Scheme::Status* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* ReleaseWindowRes::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Status>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Status* ReleaseWindowRes::mutable_status() {
  ::SMBlob::EmbeddedWindows::Scheme::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.status)
  return _msg;
}
inline void ReleaseWindowRes::set_allocated_status(::SMBlob::EmbeddedWindows::Scheme::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.status)
}

// .SMBlob.EmbeddedWindows.Scheme.Window parentWindow = 2;
inline bool ReleaseWindowRes::_internal_has_parentwindow() const {
  return this != internal_default_instance() && _impl_.parentwindow_ != nullptr;
}
inline bool ReleaseWindowRes::has_parentwindow() const {
  return _internal_has_parentwindow();
}
inline void ReleaseWindowRes::clear_parentwindow() {
  if (GetArenaForAllocation() == nullptr && _impl_.parentwindow_ != nullptr) {
    delete _impl_.parentwindow_;
  }
  _impl_.parentwindow_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& ReleaseWindowRes::_internal_parentwindow() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Window* p = _impl_.parentwindow_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Window&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Window_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& ReleaseWindowRes::parentwindow() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.parentWindow)
  return _internal_parentwindow();
}
inline void ReleaseWindowRes::unsafe_arena_set_allocated_parentwindow(
    ::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parentwindow_);
  }
  _impl_.parentwindow_ = parentwindow;
  if (parentwindow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.parentWindow)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowRes::release_parentwindow() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.parentwindow_;
  _impl_.parentwindow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowRes::unsafe_arena_release_parentwindow() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.parentWindow)
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.parentwindow_;
  _impl_.parentwindow_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowRes::_internal_mutable_parentwindow() {
  
  if (_impl_.parentwindow_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Window>(GetArenaForAllocation());
    _impl_.parentwindow_ = p;
  }
  return _impl_.parentwindow_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowRes::mutable_parentwindow() {
  ::SMBlob::EmbeddedWindows::Scheme::Window* _msg = _internal_mutable_parentwindow();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.parentWindow)
  return _msg;
}
inline void ReleaseWindowRes::set_allocated_parentwindow(::SMBlob::EmbeddedWindows::Scheme::Window* parentwindow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.parentwindow_;
  }
  if (parentwindow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parentwindow);
    if (message_arena != submessage_arena) {
      parentwindow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parentwindow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parentwindow_ = parentwindow;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.parentWindow)
}

// .SMBlob.EmbeddedWindows.Scheme.Window window = 3;
inline bool ReleaseWindowRes::_internal_has_window() const {
  return this != internal_default_instance() && _impl_.window_ != nullptr;
}
inline bool ReleaseWindowRes::has_window() const {
  return _internal_has_window();
}
inline void ReleaseWindowRes::clear_window() {
  if (GetArenaForAllocation() == nullptr && _impl_.window_ != nullptr) {
    delete _impl_.window_;
  }
  _impl_.window_ = nullptr;
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& ReleaseWindowRes::_internal_window() const {
  const ::SMBlob::EmbeddedWindows::Scheme::Window* p = _impl_.window_;
  return p != nullptr ? *p : reinterpret_cast<const ::SMBlob::EmbeddedWindows::Scheme::Window&>(
      ::SMBlob::EmbeddedWindows::Scheme::_Window_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::Window& ReleaseWindowRes::window() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.window)
  return _internal_window();
}
inline void ReleaseWindowRes::unsafe_arena_set_allocated_window(
    ::SMBlob::EmbeddedWindows::Scheme::Window* window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_);
  }
  _impl_.window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.window)
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowRes::release_window() {
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowRes::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.window)
  
  ::SMBlob::EmbeddedWindows::Scheme::Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
  return temp;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowRes::_internal_mutable_window() {
  
  if (_impl_.window_ == nullptr) {
    auto* p = CreateMaybeMessage<::SMBlob::EmbeddedWindows::Scheme::Window>(GetArenaForAllocation());
    _impl_.window_ = p;
  }
  return _impl_.window_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::Window* ReleaseWindowRes::mutable_window() {
  ::SMBlob::EmbeddedWindows::Scheme::Window* _msg = _internal_mutable_window();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.window)
  return _msg;
}
inline void ReleaseWindowRes::set_allocated_window(::SMBlob::EmbeddedWindows::Scheme::Window* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.window_;
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(window);
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.window_ = window;
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.window)
}

// optional string tag = 1001;
inline bool ReleaseWindowRes::_internal_has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReleaseWindowRes::has_tag() const {
  return _internal_has_tag();
}
inline void ReleaseWindowRes::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReleaseWindowRes::tag() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReleaseWindowRes::set_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.tag)
}
inline std::string* ReleaseWindowRes::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.tag)
  return _s;
}
inline const std::string& ReleaseWindowRes::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void ReleaseWindowRes::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* ReleaseWindowRes::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* ReleaseWindowRes::release_tag() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReleaseWindowRes::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes.tag)
}

// -------------------------------------------------------------------

// Request

// .SMBlob.EmbeddedWindows.Scheme.CloseApplicationReq closeApplication = 1;
inline bool Request::_internal_has_closeapplication() const {
  return Message_case() == kCloseApplication;
}
inline bool Request::has_closeapplication() const {
  return _internal_has_closeapplication();
}
inline void Request::set_has_closeapplication() {
  _impl_._oneof_case_[0] = kCloseApplication;
}
inline void Request::clear_closeapplication() {
  if (_internal_has_closeapplication()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.closeapplication_;
    }
    clear_has_Message();
  }
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* Request::release_closeapplication() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Request.closeApplication)
  if (_internal_has_closeapplication()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* temp = _impl_.Message_.closeapplication_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.closeapplication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq& Request::_internal_closeapplication() const {
  return _internal_has_closeapplication()
      ? *_impl_.Message_.closeapplication_
      : reinterpret_cast< ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq&>(::SMBlob::EmbeddedWindows::Scheme::_CloseApplicationReq_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq& Request::closeapplication() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Request.closeApplication)
  return _internal_closeapplication();
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* Request::unsafe_arena_release_closeapplication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SMBlob.EmbeddedWindows.Scheme.Request.closeApplication)
  if (_internal_has_closeapplication()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* temp = _impl_.Message_.closeapplication_;
    _impl_.Message_.closeapplication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_closeapplication(::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* closeapplication) {
  clear_Message();
  if (closeapplication) {
    set_has_closeapplication();
    _impl_.Message_.closeapplication_ = closeapplication;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.Request.closeApplication)
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* Request::_internal_mutable_closeapplication() {
  if (!_internal_has_closeapplication()) {
    clear_Message();
    set_has_closeapplication();
    _impl_.Message_.closeapplication_ = CreateMaybeMessage< ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq >(GetArenaForAllocation());
  }
  return _impl_.Message_.closeapplication_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* Request::mutable_closeapplication() {
  ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationReq* _msg = _internal_mutable_closeapplication();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Request.closeApplication)
  return _msg;
}

// .SMBlob.EmbeddedWindows.Scheme.EmbedWindowReq embedWindow = 2;
inline bool Request::_internal_has_embedwindow() const {
  return Message_case() == kEmbedWindow;
}
inline bool Request::has_embedwindow() const {
  return _internal_has_embedwindow();
}
inline void Request::set_has_embedwindow() {
  _impl_._oneof_case_[0] = kEmbedWindow;
}
inline void Request::clear_embedwindow() {
  if (_internal_has_embedwindow()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.embedwindow_;
    }
    clear_has_Message();
  }
}
inline ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* Request::release_embedwindow() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Request.embedWindow)
  if (_internal_has_embedwindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* temp = _impl_.Message_.embedwindow_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.embedwindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq& Request::_internal_embedwindow() const {
  return _internal_has_embedwindow()
      ? *_impl_.Message_.embedwindow_
      : reinterpret_cast< ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq&>(::SMBlob::EmbeddedWindows::Scheme::_EmbedWindowReq_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq& Request::embedwindow() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Request.embedWindow)
  return _internal_embedwindow();
}
inline ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* Request::unsafe_arena_release_embedwindow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SMBlob.EmbeddedWindows.Scheme.Request.embedWindow)
  if (_internal_has_embedwindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* temp = _impl_.Message_.embedwindow_;
    _impl_.Message_.embedwindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_embedwindow(::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* embedwindow) {
  clear_Message();
  if (embedwindow) {
    set_has_embedwindow();
    _impl_.Message_.embedwindow_ = embedwindow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.Request.embedWindow)
}
inline ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* Request::_internal_mutable_embedwindow() {
  if (!_internal_has_embedwindow()) {
    clear_Message();
    set_has_embedwindow();
    _impl_.Message_.embedwindow_ = CreateMaybeMessage< ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq >(GetArenaForAllocation());
  }
  return _impl_.Message_.embedwindow_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* Request::mutable_embedwindow() {
  ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowReq* _msg = _internal_mutable_embedwindow();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Request.embedWindow)
  return _msg;
}

// .SMBlob.EmbeddedWindows.Scheme.ReleaseWindowReq releaseWindow = 3;
inline bool Request::_internal_has_releasewindow() const {
  return Message_case() == kReleaseWindow;
}
inline bool Request::has_releasewindow() const {
  return _internal_has_releasewindow();
}
inline void Request::set_has_releasewindow() {
  _impl_._oneof_case_[0] = kReleaseWindow;
}
inline void Request::clear_releasewindow() {
  if (_internal_has_releasewindow()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.releasewindow_;
    }
    clear_has_Message();
  }
}
inline ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* Request::release_releasewindow() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Request.releaseWindow)
  if (_internal_has_releasewindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* temp = _impl_.Message_.releasewindow_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.releasewindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq& Request::_internal_releasewindow() const {
  return _internal_has_releasewindow()
      ? *_impl_.Message_.releasewindow_
      : reinterpret_cast< ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq&>(::SMBlob::EmbeddedWindows::Scheme::_ReleaseWindowReq_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq& Request::releasewindow() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Request.releaseWindow)
  return _internal_releasewindow();
}
inline ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* Request::unsafe_arena_release_releasewindow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SMBlob.EmbeddedWindows.Scheme.Request.releaseWindow)
  if (_internal_has_releasewindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* temp = _impl_.Message_.releasewindow_;
    _impl_.Message_.releasewindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_releasewindow(::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* releasewindow) {
  clear_Message();
  if (releasewindow) {
    set_has_releasewindow();
    _impl_.Message_.releasewindow_ = releasewindow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.Request.releaseWindow)
}
inline ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* Request::_internal_mutable_releasewindow() {
  if (!_internal_has_releasewindow()) {
    clear_Message();
    set_has_releasewindow();
    _impl_.Message_.releasewindow_ = CreateMaybeMessage< ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq >(GetArenaForAllocation());
  }
  return _impl_.Message_.releasewindow_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* Request::mutable_releasewindow() {
  ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowReq* _msg = _internal_mutable_releasewindow();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Request.releaseWindow)
  return _msg;
}

// .SMBlob.EmbeddedWindows.Scheme.CloseWindowReq closeWindow = 4;
inline bool Request::_internal_has_closewindow() const {
  return Message_case() == kCloseWindow;
}
inline bool Request::has_closewindow() const {
  return _internal_has_closewindow();
}
inline void Request::set_has_closewindow() {
  _impl_._oneof_case_[0] = kCloseWindow;
}
inline void Request::clear_closewindow() {
  if (_internal_has_closewindow()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.closewindow_;
    }
    clear_has_Message();
  }
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* Request::release_closewindow() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Request.closeWindow)
  if (_internal_has_closewindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* temp = _impl_.Message_.closewindow_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.closewindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq& Request::_internal_closewindow() const {
  return _internal_has_closewindow()
      ? *_impl_.Message_.closewindow_
      : reinterpret_cast< ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq&>(::SMBlob::EmbeddedWindows::Scheme::_CloseWindowReq_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq& Request::closewindow() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Request.closeWindow)
  return _internal_closewindow();
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* Request::unsafe_arena_release_closewindow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SMBlob.EmbeddedWindows.Scheme.Request.closeWindow)
  if (_internal_has_closewindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* temp = _impl_.Message_.closewindow_;
    _impl_.Message_.closewindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_closewindow(::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* closewindow) {
  clear_Message();
  if (closewindow) {
    set_has_closewindow();
    _impl_.Message_.closewindow_ = closewindow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.Request.closeWindow)
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* Request::_internal_mutable_closewindow() {
  if (!_internal_has_closewindow()) {
    clear_Message();
    set_has_closewindow();
    _impl_.Message_.closewindow_ = CreateMaybeMessage< ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq >(GetArenaForAllocation());
  }
  return _impl_.Message_.closewindow_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* Request::mutable_closewindow() {
  ::SMBlob::EmbeddedWindows::Scheme::CloseWindowReq* _msg = _internal_mutable_closewindow();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Request.closeWindow)
  return _msg;
}

inline bool Request::has_Message() const {
  return Message_case() != MESSAGE_NOT_SET;
}
inline void Request::clear_has_Message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Request::MessageCase Request::Message_case() const {
  return Request::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// .SMBlob.EmbeddedWindows.Scheme.CloseApplicationRes closeApplication = 1;
inline bool Response::_internal_has_closeapplication() const {
  return Message_case() == kCloseApplication;
}
inline bool Response::has_closeapplication() const {
  return _internal_has_closeapplication();
}
inline void Response::set_has_closeapplication() {
  _impl_._oneof_case_[0] = kCloseApplication;
}
inline void Response::clear_closeapplication() {
  if (_internal_has_closeapplication()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.closeapplication_;
    }
    clear_has_Message();
  }
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* Response::release_closeapplication() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Response.closeApplication)
  if (_internal_has_closeapplication()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* temp = _impl_.Message_.closeapplication_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.closeapplication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes& Response::_internal_closeapplication() const {
  return _internal_has_closeapplication()
      ? *_impl_.Message_.closeapplication_
      : reinterpret_cast< ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes&>(::SMBlob::EmbeddedWindows::Scheme::_CloseApplicationRes_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes& Response::closeapplication() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Response.closeApplication)
  return _internal_closeapplication();
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* Response::unsafe_arena_release_closeapplication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SMBlob.EmbeddedWindows.Scheme.Response.closeApplication)
  if (_internal_has_closeapplication()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* temp = _impl_.Message_.closeapplication_;
    _impl_.Message_.closeapplication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_closeapplication(::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* closeapplication) {
  clear_Message();
  if (closeapplication) {
    set_has_closeapplication();
    _impl_.Message_.closeapplication_ = closeapplication;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.Response.closeApplication)
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* Response::_internal_mutable_closeapplication() {
  if (!_internal_has_closeapplication()) {
    clear_Message();
    set_has_closeapplication();
    _impl_.Message_.closeapplication_ = CreateMaybeMessage< ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes >(GetArenaForAllocation());
  }
  return _impl_.Message_.closeapplication_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* Response::mutable_closeapplication() {
  ::SMBlob::EmbeddedWindows::Scheme::CloseApplicationRes* _msg = _internal_mutable_closeapplication();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Response.closeApplication)
  return _msg;
}

// .SMBlob.EmbeddedWindows.Scheme.EmbedWindowRes embedWindow = 2;
inline bool Response::_internal_has_embedwindow() const {
  return Message_case() == kEmbedWindow;
}
inline bool Response::has_embedwindow() const {
  return _internal_has_embedwindow();
}
inline void Response::set_has_embedwindow() {
  _impl_._oneof_case_[0] = kEmbedWindow;
}
inline void Response::clear_embedwindow() {
  if (_internal_has_embedwindow()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.embedwindow_;
    }
    clear_has_Message();
  }
}
inline ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* Response::release_embedwindow() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Response.embedWindow)
  if (_internal_has_embedwindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* temp = _impl_.Message_.embedwindow_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.embedwindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes& Response::_internal_embedwindow() const {
  return _internal_has_embedwindow()
      ? *_impl_.Message_.embedwindow_
      : reinterpret_cast< ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes&>(::SMBlob::EmbeddedWindows::Scheme::_EmbedWindowRes_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes& Response::embedwindow() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Response.embedWindow)
  return _internal_embedwindow();
}
inline ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* Response::unsafe_arena_release_embedwindow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SMBlob.EmbeddedWindows.Scheme.Response.embedWindow)
  if (_internal_has_embedwindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* temp = _impl_.Message_.embedwindow_;
    _impl_.Message_.embedwindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_embedwindow(::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* embedwindow) {
  clear_Message();
  if (embedwindow) {
    set_has_embedwindow();
    _impl_.Message_.embedwindow_ = embedwindow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.Response.embedWindow)
}
inline ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* Response::_internal_mutable_embedwindow() {
  if (!_internal_has_embedwindow()) {
    clear_Message();
    set_has_embedwindow();
    _impl_.Message_.embedwindow_ = CreateMaybeMessage< ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes >(GetArenaForAllocation());
  }
  return _impl_.Message_.embedwindow_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* Response::mutable_embedwindow() {
  ::SMBlob::EmbeddedWindows::Scheme::EmbedWindowRes* _msg = _internal_mutable_embedwindow();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Response.embedWindow)
  return _msg;
}

// .SMBlob.EmbeddedWindows.Scheme.ReleaseWindowRes releaseWindow = 3;
inline bool Response::_internal_has_releasewindow() const {
  return Message_case() == kReleaseWindow;
}
inline bool Response::has_releasewindow() const {
  return _internal_has_releasewindow();
}
inline void Response::set_has_releasewindow() {
  _impl_._oneof_case_[0] = kReleaseWindow;
}
inline void Response::clear_releasewindow() {
  if (_internal_has_releasewindow()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.releasewindow_;
    }
    clear_has_Message();
  }
}
inline ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* Response::release_releasewindow() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Response.releaseWindow)
  if (_internal_has_releasewindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* temp = _impl_.Message_.releasewindow_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.releasewindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes& Response::_internal_releasewindow() const {
  return _internal_has_releasewindow()
      ? *_impl_.Message_.releasewindow_
      : reinterpret_cast< ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes&>(::SMBlob::EmbeddedWindows::Scheme::_ReleaseWindowRes_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes& Response::releasewindow() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Response.releaseWindow)
  return _internal_releasewindow();
}
inline ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* Response::unsafe_arena_release_releasewindow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SMBlob.EmbeddedWindows.Scheme.Response.releaseWindow)
  if (_internal_has_releasewindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* temp = _impl_.Message_.releasewindow_;
    _impl_.Message_.releasewindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_releasewindow(::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* releasewindow) {
  clear_Message();
  if (releasewindow) {
    set_has_releasewindow();
    _impl_.Message_.releasewindow_ = releasewindow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.Response.releaseWindow)
}
inline ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* Response::_internal_mutable_releasewindow() {
  if (!_internal_has_releasewindow()) {
    clear_Message();
    set_has_releasewindow();
    _impl_.Message_.releasewindow_ = CreateMaybeMessage< ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes >(GetArenaForAllocation());
  }
  return _impl_.Message_.releasewindow_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* Response::mutable_releasewindow() {
  ::SMBlob::EmbeddedWindows::Scheme::ReleaseWindowRes* _msg = _internal_mutable_releasewindow();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Response.releaseWindow)
  return _msg;
}

// .SMBlob.EmbeddedWindows.Scheme.CloseWindowRes closeWindow = 4;
inline bool Response::_internal_has_closewindow() const {
  return Message_case() == kCloseWindow;
}
inline bool Response::has_closewindow() const {
  return _internal_has_closewindow();
}
inline void Response::set_has_closewindow() {
  _impl_._oneof_case_[0] = kCloseWindow;
}
inline void Response::clear_closewindow() {
  if (_internal_has_closewindow()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.closewindow_;
    }
    clear_has_Message();
  }
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* Response::release_closewindow() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Response.closeWindow)
  if (_internal_has_closewindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* temp = _impl_.Message_.closewindow_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.closewindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes& Response::_internal_closewindow() const {
  return _internal_has_closewindow()
      ? *_impl_.Message_.closewindow_
      : reinterpret_cast< ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes&>(::SMBlob::EmbeddedWindows::Scheme::_CloseWindowRes_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes& Response::closewindow() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Response.closeWindow)
  return _internal_closewindow();
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* Response::unsafe_arena_release_closewindow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SMBlob.EmbeddedWindows.Scheme.Response.closeWindow)
  if (_internal_has_closewindow()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* temp = _impl_.Message_.closewindow_;
    _impl_.Message_.closewindow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_closewindow(::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* closewindow) {
  clear_Message();
  if (closewindow) {
    set_has_closewindow();
    _impl_.Message_.closewindow_ = closewindow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.Response.closeWindow)
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* Response::_internal_mutable_closewindow() {
  if (!_internal_has_closewindow()) {
    clear_Message();
    set_has_closewindow();
    _impl_.Message_.closewindow_ = CreateMaybeMessage< ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes >(GetArenaForAllocation());
  }
  return _impl_.Message_.closewindow_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* Response::mutable_closewindow() {
  ::SMBlob::EmbeddedWindows::Scheme::CloseWindowRes* _msg = _internal_mutable_closewindow();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Response.closeWindow)
  return _msg;
}

// .SMBlob.EmbeddedWindows.Scheme.ConnectApplicationRes connectApplication = 5;
inline bool Response::_internal_has_connectapplication() const {
  return Message_case() == kConnectApplication;
}
inline bool Response::has_connectapplication() const {
  return _internal_has_connectapplication();
}
inline void Response::set_has_connectapplication() {
  _impl_._oneof_case_[0] = kConnectApplication;
}
inline void Response::clear_connectapplication() {
  if (_internal_has_connectapplication()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.connectapplication_;
    }
    clear_has_Message();
  }
}
inline ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* Response::release_connectapplication() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Response.connectApplication)
  if (_internal_has_connectapplication()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* temp = _impl_.Message_.connectapplication_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.connectapplication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes& Response::_internal_connectapplication() const {
  return _internal_has_connectapplication()
      ? *_impl_.Message_.connectapplication_
      : reinterpret_cast< ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes&>(::SMBlob::EmbeddedWindows::Scheme::_ConnectApplicationRes_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes& Response::connectapplication() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Response.connectApplication)
  return _internal_connectapplication();
}
inline ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* Response::unsafe_arena_release_connectapplication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SMBlob.EmbeddedWindows.Scheme.Response.connectApplication)
  if (_internal_has_connectapplication()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* temp = _impl_.Message_.connectapplication_;
    _impl_.Message_.connectapplication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_connectapplication(::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* connectapplication) {
  clear_Message();
  if (connectapplication) {
    set_has_connectapplication();
    _impl_.Message_.connectapplication_ = connectapplication;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.Response.connectApplication)
}
inline ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* Response::_internal_mutable_connectapplication() {
  if (!_internal_has_connectapplication()) {
    clear_Message();
    set_has_connectapplication();
    _impl_.Message_.connectapplication_ = CreateMaybeMessage< ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes >(GetArenaForAllocation());
  }
  return _impl_.Message_.connectapplication_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* Response::mutable_connectapplication() {
  ::SMBlob::EmbeddedWindows::Scheme::ConnectApplicationRes* _msg = _internal_mutable_connectapplication();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Response.connectApplication)
  return _msg;
}

// .SMBlob.EmbeddedWindows.Scheme.InitApplicationRes initApplication = 6;
inline bool Response::_internal_has_initapplication() const {
  return Message_case() == kInitApplication;
}
inline bool Response::has_initapplication() const {
  return _internal_has_initapplication();
}
inline void Response::set_has_initapplication() {
  _impl_._oneof_case_[0] = kInitApplication;
}
inline void Response::clear_initapplication() {
  if (_internal_has_initapplication()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Message_.initapplication_;
    }
    clear_has_Message();
  }
}
inline ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* Response::release_initapplication() {
  // @@protoc_insertion_point(field_release:SMBlob.EmbeddedWindows.Scheme.Response.initApplication)
  if (_internal_has_initapplication()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* temp = _impl_.Message_.initapplication_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Message_.initapplication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes& Response::_internal_initapplication() const {
  return _internal_has_initapplication()
      ? *_impl_.Message_.initapplication_
      : reinterpret_cast< ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes&>(::SMBlob::EmbeddedWindows::Scheme::_InitApplicationRes_default_instance_);
}
inline const ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes& Response::initapplication() const {
  // @@protoc_insertion_point(field_get:SMBlob.EmbeddedWindows.Scheme.Response.initApplication)
  return _internal_initapplication();
}
inline ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* Response::unsafe_arena_release_initapplication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SMBlob.EmbeddedWindows.Scheme.Response.initApplication)
  if (_internal_has_initapplication()) {
    clear_has_Message();
    ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* temp = _impl_.Message_.initapplication_;
    _impl_.Message_.initapplication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_initapplication(::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* initapplication) {
  clear_Message();
  if (initapplication) {
    set_has_initapplication();
    _impl_.Message_.initapplication_ = initapplication;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SMBlob.EmbeddedWindows.Scheme.Response.initApplication)
}
inline ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* Response::_internal_mutable_initapplication() {
  if (!_internal_has_initapplication()) {
    clear_Message();
    set_has_initapplication();
    _impl_.Message_.initapplication_ = CreateMaybeMessage< ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes >(GetArenaForAllocation());
  }
  return _impl_.Message_.initapplication_;
}
inline ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* Response::mutable_initapplication() {
  ::SMBlob::EmbeddedWindows::Scheme::InitApplicationRes* _msg = _internal_mutable_initapplication();
  // @@protoc_insertion_point(field_mutable:SMBlob.EmbeddedWindows.Scheme.Response.initApplication)
  return _msg;
}

inline bool Response::has_Message() const {
  return Message_case() != MESSAGE_NOT_SET;
}
inline void Response::clear_has_Message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Response::MessageCase Response::Message_case() const {
  return Response::MessageCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Scheme
}  // namespace EmbeddedWindows
}  // namespace SMBlob

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_embedded_2dwindows_2escheme_2eproto
